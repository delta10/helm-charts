replicaCount: 1

image:
  repository: ghcr.io/delta10/filter-proxy
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

extraVolumes: []
extraVolumeMounts: []

# -- Additional environment variables mounted from [secrets](https://kubernetes.io/docs/concepts/configuration/secret/#using-secrets-as-environment-variables) or [config maps](https://kubernetes.io/docs/tasks/configure-pod-container/configure-pod-configmap/#configure-all-key-value-pairs-in-a-configmap-as-container-environment-variables).
# See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#environment-variables) for details.
envFrom: []

# -- Additional environment variables passed directly to containers.
# See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#environment-variables) for details.
env: {}

# -- Similar to env but with support for all possible configurations.
# See the [API reference](https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#environment-variables) for details.
envVars: []
# - name: SOME_ENV_VAR
#   value: value
# - name: SOME_ENV_VAR2
#   valueFrom:
#     secretKeyRef:
#       name: secret-name
#       key: secret-key
# - name: SOME_ENV_VAR3
#   valueFrom:
#     configMapKeyRef:
#       name: config-map-name
#       key: config-map-key

# Refer to existing secret to avoid managing secrets through Helm
existingSecret: ""

secrets:
  API_KEY: something-secret

config:
  listenAddress: 0.0.0.0:8080
  authorizationServiceUrl: http://localhost:8000/atlas/api/v1/authorize/

  paths:
    - path: /api/ows
      backend:
        slug: geoserver
        path: /ows
    - path: /api/wmts
      backend:
        slug: geoserver
        path: /gwc/service/wmts
    - path: /api/brp/v1/personen
      allowedMethods:
        - POST
      backend:
        slug: brp
        path: /personen
      requestRewrite: |
        (
          if .geslachtsnaam and .geslachtsnaam != "" then {
            type: "ZoekMetGeslachtsnaamEnGeboortedatum",
            geslachtsnaam: .geslachtsnaam,
            geboortedatum: .geboortedatum,
            fields: ["burgerservicenummer","geboorte", "geslacht", "naam", "adressering"]
          } else {
            type: "RaadpleegMetBurgerservicenummer",
            burgerservicenummer: [ .burgerservicenummer ],
            fields: ["burgerservicenummer","geboorte", "geslacht", "naam", "adressering"]
          }
          end
        )
    - path: /api/brk/v1/kadastraalonroerendezaken/{kadastraalOnroerendeZaakIdentificatie:[0-9]+}
      backend:
        slug: brk
        path: /kadastraalonroerendezaken/{kadastraalOnroerendeZaakIdentificatie:[0-9]+}
      responseRewrite: |
        {
          aardCultuurBebouwd: .aardCultuurBebouwd,
          adressen: .adressen,
          begrenzingPerceel: .begrenzingPerceel,
          identificatie: .identificatie,
          kadastraleAanduiding: .kadastraleAanduiding,
          kadastraleGrootte: .kadastraleGrootte,
          perceelnummerRotatie: .perceelnummerRotatie,
          perceelnummerVerschuiving: .perceelnummerVerschuiving,
          plaatscoordinaten: .plaatscoordinaten,
          toelichtingBewaarder: .toelichtingBewaarder,
          type: .type,
          zakelijkGerechtigdeIdentificaties: .zakelijkGerechtigdeIdentificaties
        }
    - path: /api/brk/v1/kadastraalonroerendezaken/{kadastraalOnroerendeZaakIdentificatie:[0-9]+}/zakelijkgerechtigden
      backend:
        slug: brk
        path: /kadastraalonroerendezaken/{kadastraalOnroerendeZaakIdentificatie:[0-9]+}/zakelijkgerechtigden
      responseRewrite: |
        {
          "_embedded": {
            "zakelijkGerechtigden": [
              ._embedded.zakelijkGerechtigden[] |
                {
                  "aanvangsdatum": .aanvangsdatum,
                  "type": .type,
                  "persoon": .persoon | {
                    "omschrijving": .omschrijving,
                    "type": .type
                  },
                  "tenaamstelling": .tenaamstelling | {
                    "aandeel": .aandeel,
                    "isGebaseerdOpStukdeelIdentificaties": .isGebaseerdOpStukdeelIdentificaties,
                    "stukIdentificaties": .stukIdentificaties,
                    "betrokkenGorzenEnAanwassen": .betrokkenGorzenEnAanwassen | {
                      "omschrijving": .omschrijving,
                      "type": .type
                    },
                    "betrokkenPartner": .betrokkenPartner | {
                      "omschrijving": .omschrijving,
                      "type": .type
                    },
                    "betrokkenSamenwerkingsverband": .betrokkenSamenwerkingsverband | {
                      "omschrijving": .omschrijving,
                      "type": .type
                    },
                    "burgerlijkeStaatTenTijdeVanVerkrijging": .burgerlijkeStaatTenTijdeVanVerkrijging | {
                      "code": .code,
                      "waarde": .waarde
                    }
                  },
                }
            ]
          }
        }
    - path: /api/brk/v1/publiekrechtelijkebeperkingen
      backend:
        slug: brk
        path: /publiekrechtelijkebeperkingen
      responseRewrite: |
        {
          "_embedded": {
            "publiekrechtelijkeBeperkingen": [
              ._embedded.publiekrechtelijkeBeperkingen[] |
                {
                  "identificatie": .identificatie,
                  "domein": .domein,
                  "grondslag": .grondslag,
                  "datumInWerking": .datumInWerking,
                  "datumBeeindiging": .datumBeeindiging,
                  "bevoegdGezag": .bevoegdGezag | {
                      "omschrijving": .omschrijving,
                      "type": .type
                  },
                  "stukIdentificaties": .stukIdentificaties,
                  "isGebaseerdOpStukdeelIdentificatie": .isGebaseerdOpStukdeelIdentificatie
                }
            ]
          }
        }

  backends:
    geoserver:
      baseUrl: http://localhost:8051/geoserver
      auth:
        basic:
          username: admin
          password: geoserver
    brk:
      baseUrl: https://api.brk.kadaster.nl/esd-eto-apikey/bevragen/v1
      auth:
        header:
          X-Api-Key: ${BRK_API_KEY}
    brp:
      baseUrl: https://proefomgeving.haalcentraal.nl/haalcentraal/api/brp
      auth:
        header:
          X-API-KEY: ${BRP_API_KEY}

service:
  type: ClusterIP
  port: 8080

ingress:
  enabled: false
  className: ""
  annotations:
    {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
